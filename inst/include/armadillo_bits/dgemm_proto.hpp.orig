// Copyright (C) 2008 NICTA
// 
// Author(s): Conrad Sanderson 
// 
// This file is part of the Armadillo Library. You can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2, 
// or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
// 
// As a special exception, if other files instantiate templates
// or use macros or inline functions from this file, or you compile 
// this file and link it with other files to produce an executable,
// this file does not by itself cause the resulting executable to be
// covered by the GNU General Public License. This exception does not
// however invalidate any other reasons why the executable file might 
// be covered by the GNU General Public License.


//! \addtogroup dgemm
//! @{


//! wrapper for ATLAS/BLAS dgemm function, using template arguments to control the arguments passed to dgemm.
//! If ATLAS/BLAS is not available, a partial emulation of dgemm's functionality is provided.
template<bool do_trans_A=false, bool do_trans_B=false, bool use_alpha=false, bool use_beta=false>
class dgemm
  {
  public:
  
  //! immediate multiplication of matrices A and B, storing the result in C
  inline static void apply(mat& C, const mat& A, const mat& B, const double alpha = 1.0, const double beta = 0.0)
    {
    lowdebug_print("dgemm::apply()");
    #if defined(ARMA_USE_ATLAS)
      {
      lowdebug_print("atlas::cblas_dgemm()");
      
      atlas::cblas_dgemm
        (
        atlas::CblasColMajor,
        (do_trans_A) ? atlas::CblasTrans : atlas::CblasNoTrans,
        (do_trans_B) ? atlas::CblasTrans : atlas::CblasNoTrans,
        C.n_rows,
        C.n_cols,
        (do_trans_A) ? A.n_rows : A.n_cols,
        (use_alpha) ? alpha : 1.0,
        A.mem,
        (do_trans_A) ? A.n_rows : C.n_rows,
        B.mem,
        (do_trans_B) ? C.n_cols : ( (do_trans_A) ? A.n_rows : A.n_cols ),
        (use_beta) ? beta : 0.0,
        C.memptr(),
        C.n_rows
        );
      }
    #elif defined(ARMA_USE_BLAS)
      {
      lowdebug_print("blas::dgemm_()");
      
      const char trans_A = (do_trans_A) ? 'Y' : 'N';
      const char trans_B = (do_trans_B) ? 'Y' : 'N';
      
      const int m   = C.n_rows;
      const int n   = C.n_cols;
      const int k   = (do_trans_A) ? A.n_rows : A.n_cols;
      
      const double local_alpha = (use_alpha) ? alpha : 1.0;
      
      const int lda = (do_trans_A) ? k : m;
      const int ldb = (do_trans_B) ? n : k;
      
      const double local_beta  = (use_beta) ? beta : 0.0;
      
      blas::dgemm_
        (
        &trans_A,
        &trans_B,
        &m,
        &n,
        &k,
        &local_alpha,
        A.mem,
        &lda,
        B.mem,
        &ldb,
        &local_beta,
        C.memptr(),
        &m
        );
      }
    #else
      {
      if( (do_trans_A == false) && (do_trans_B == false) )
        {
        lowdebug_print("dgemm::apply(): home brewed");

        quickarray<double> tmp(A.n_cols);
        double* A_rowdata = tmp.memptr();
        
        for(u32 row_A=0; row_A != A.n_rows; ++row_A)
          {
          for(u32 col_A=0; col_A != A.n_cols; ++col_A)
            A_rowdata[col_A] = A.at(row_A,col_A);
          
          for(u32 col_B=0; col_B != B.n_cols; ++col_B)
            {
            const double* B_coldata = B.colptr(col_B);
            
            double acc = 0.0;
            for(u32 i=0; i != B.n_rows; ++i)
              acc += A_rowdata[i] * B_coldata[i];
          
            if( (use_alpha == false) && (use_beta == false) )
              {
              C.at(row_A,col_B) = acc;
              }
            else
            if( (use_alpha == true) && (use_beta == false) )
              {
              C.at(row_A,col_B) = alpha * acc;
              }
            else
            if( (use_alpha == false) && (use_beta == true) )
              {
              const double val = C.at(row_A,col_B);
              C.at(row_A,col_B) = acc + beta*val;
              }
            else
            if( (use_alpha == true) && (use_beta == true) )
              {
              const double val = C.at(row_A,col_B);
              C.at(row_A,col_B) = alpha*acc + beta*val;
              }
            
            }
          }
        }
      else
        {
        check( true, "Need ATLAS or BLAS" );
        }
      }
    #endif
    }
  
  };


//! @}
