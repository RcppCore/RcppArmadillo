\documentclass[10pt]{article}
%\VignetteIndexEntry{RcppArmadillo-sparseMatrix}
%\VignetteKeywords{R, C++, Armadillo, linear algebra, sparse matrix}
%\VignettePackage{RcppArmadillo}

\usepackage{vmargin}
\setmargrb{1.5in}{0.75in}{1.5in}{0.75in}

\usepackage{color}               % color use

\RequirePackage{ae,mathpple}    % ae as a default font pkg works with Sweave
\RequirePackage[T1]{fontenc}

\usepackage{listings}
\definecolor{darkgray}{rgb}{0.975,0.975,0.975}
\lstset{ %
  %basicstyle=\small,             % the size of the fonts that are used for the code
  numbers=left,                   % where to put the line-numbers
  numberstyle=\tiny,              % the size of the fonts that are used for the line-numbers
  stepnumber=2,                   % the step between two line-numbers. If it's 1, each line
                                  % will be numbered
  numbersep=5pt,                  % how far the line-numbers are from the code
  backgroundcolor=\color{darkgray}, % choose the background color. Must add \usepackage{color}
  showspaces=false,               % show spaces adding particular underscores
  showstringspaces=false,         % underline spaces within strings
  showtabs=false,                 % show tabs within strings adding particular underscores
  %frame=single,                  % adds a frame around the code
  tabsize=2,                      % sets default tabsize to 2 spaces
  captionpos=b,                   % sets the caption-position to bottom
  breaklines=true,                % sets automatic line breaking
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
  %title=\lstname,                % show the filename of files included with \lstinputlisting;
                                  % also try caption instead of title
  %escapeinside={\%*}{*)},        % if you want to add a comment within your code
  %morekeywords={*,...}           % if you want to add more keywords to the set
  %
  basicstyle=\ttfamily\small,
  commentstyle=\textsl,
  keywordstyle=\ttfamily\small
  %keywordstyle=\color{black}\bfseries\tt
}

\usepackage[colorlinks]{hyperref}% for \href
\usepackage{indentfirst}

%%% from jss.cls defs
\makeatletter
\newcommand\code{\bgroup\@makeother\_\@makeother\~\@makeother\$\@codex}
\def\@codex#1{{\normalfont\ttfamily\hyphenchar\font=-1 #1}\egroup}

<<echo=FALSE,print=FALSE>>=
prettyVersion <- packageDescription("RcppArmadillo")$Version #$
prettyDate <- format(Sys.Date(), "%B %e, %Y")
@

\author{Binxiang Ni, Dmitriy Selivanov, Dirk Eddelbuettel and Qiang Kou}
\title{\textbf{RcppArmadillo}: Sparse Matrix Support}
\date{\textbf{RcppArmadillo} version \Sexpr{prettyVersion} as of \Sexpr{prettyDate}}

\begin{document}
\maketitle
\SweaveOpts{concordance=TRUE}

\section{Introduction}

The documentation is intended for RcppArmadillo sparse matrix user's convenience based on integration of the documentation of library \href{https://cran.r-project.org/web/packages/Matrix/Matrix.pdf}{"Matrix"} and \href{http://arma.sourceforge.net/docs.html#SpMat}{"Armadillo"}. 

There are 31 types of sparse matrices in the package "Matrix" that can be directly used. But for now, only 12 of them are supported in RcppArmadillo: dgCMatrix, dtCMatrix, dsCMatrix, dgTMatrix dtTMatrix, dsTMatrix, dgRMatrix, dtRMatrix, dsRMatrix, indMatrix, pMatrix, ddiMatrix.

In the library "Armadillo", sparse matrix is currently stored as \href{https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_.28CSC_or_CCS.29}{CSC} format. Such kind of format is quite similar to numeric column-oriented sparse matrix in the library "Matrix" (including dgCMatrix, dtCMatrix and dsCMatrix). When a sparse matrix from the library "Matrix" is passed through RcppArmadillo, it will be converted or mapped to CSC format, then undertaken operations on, and finally ouput as dgCMatrix in R.

\section{Sparse Matrix}
\subsection{dgCMatrix}
\begin{itemize}
  \item Description: general column-oriented numeric sparse matrix.
  \item Constructor
    \begin{itemize}
      \item \code{new("dgCMatrix", ...)}   
      \item \code{Matrix(*, sparse = TRUE)}  
      \item \code{sparseMatrix()}
    \end{itemize}
  \item Coercion
    \begin{itemize}
      \item \code{as(*, "CsparseMatrix")} 
      \item \code{as(*, "dgCMatrix")}
    \end{itemize}
  \item Examples
\lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for dgCMatrix},
  label={code:dgCMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;
using namespace arma;
  
// [[Rcpp::export]]
sp_mat sqrt_(sp_mat X) {
  return sqrt(X);
}
  
/* 
R> i <- c(1,3:8); j <- c(2,9,6:10); x <- 7 * (1:7)
R> A <- sparseMatrix(i, j, x = x) 
R> sqrt_(A)
8 x 10 sparse Matrix of class "dgCMatrix"
  
[1,] . 2.645751 . . . .        .        .       .        .
[2,] . .        . . . .        .        .       .        .
[3,] . .        . . . .        .        .       3.741657 .
[4,] . .        . . . 4.582576 .        .       .        .
[5,] . .        . . . .        5.291503 .       .        .
[6,] . .        . . . .        .        5.91608 .        .
[7,] . .        . . . .        .        .       6.480741 .
[8,] . .        . . . .        .        .       .        7
*/
\end{lstlisting}
\end{itemize}

\subsection{dtCMatrix}
\begin{itemize}
  \item Description: triangular column-oriented numeric sparse matrix.
  \item Constructor
    \begin{itemize}
      \item \code{new("dtCMatrix", ...)}
      \item \code{Matrix(*, sparse = TRUE)}
      \item \code{sparseMatrix(*, triangular=TRUE)}
    \end{itemize}
  \item Coercion
    \begin{itemize}
      \item \code{as(*, "triangularMatrix")}
      \item \code{as(*, "dtCMatrix")}
    \end{itemize}
  \item Examples
\lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for dtCMatrix},
  label={code:dtCMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;
using namespace arma;
  
// [[Rcpp::export]]
sp_mat symmatl_(sp_mat X) {
  return symmatl(X);
}

/*
R > dtC <- new("dtCMatrix", Dim = c(5L, 5L), uplo = "L",
              x = c(10, 1, 3, 10, 1, 10, 1, 10, 10),
              i = c(0L, 2L, 4L, 1L, 3L,2L, 4L, 3L, 4L),
              p = c(0L, 3L, 5L, 7:9))
R > symmatl_(dtC)
5 x 5 sparse Matrix of class "dtCMatrix"

[1,] 10  .  1  .  3
[2,]  . 10  .  1  .
[3,]  1  . 10  .  1
[4,]  .  1  . 10  .
[5,]  3  .  1  . 10
*/
\end{lstlisting}
\end{itemize}

\subsection{dsCMatrix}
\begin{itemize}
  \item Description: symmetric column-oriented numeric sparse matrix.
  \item Constructor
    \begin{itemize}
      \item \code{new("dsCMatrix", ...)}
      \item \code{Matrix(*, sparse = TRUE)}
      \item \code{sparseMatrix(*, symmetric = TRUE)}
    \end{itemize}
  \item Corecion
    \begin{itemize}
      \item \code{as(*, "symmetricMatrix")}
      \item \code{as(*, "dsCMatrix")}
    \end{itemize}
  \item Examples
\lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for dsCMatrix},
  label={code:dsCMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]
  
using namespace Rcpp;
using namespace arma;
  
// [[Rcpp::export]]
sp_mat trimatu_(sp_mat X) {
  return trimatu(X);
}

/*
R> i <- c(1,3:8); j <- c(2,9,6:10); x <- 7 * (1:7)
R> dsC <- sparseMatrix(i, j, x = x, symmetric = TRUE)
R> trimatu_(dsC)
10 x 10 sparse Matrix of class "dgCMatrix"
  
[1,] . 7 . . .  .  .  .  .  .
[2,] . . . . .  .  .  .  .  .
[3,] . . . . .  .  .  . 14  .
[4,] . . . . . 21  .  .  .  .
[5,] . . . . .  . 28  .  .  .
[6,] . . . . .  .  . 35  .  .
[7,] . . . . .  .  .  . 42  .
[8,] . . . . .  .  .  .  . 49
[9,] . . . . .  .  .  .  .  .
[10,] . . . . .  .  .  .  .  .
*/
\end{lstlisting}
\end{itemize}

\subsection{dgTMatrix}
\begin{itemize}
  \item Description: general numeric sparse matrix in triplet form.
  \item Constructor
    \begin{itemize}
      \item \code{new("dgTMatrix", ...)}
      \item \code{sparseMatrix(*, giveCsparse=FALSE)}
      \item \code{spMatrix()}
    \end{itemize}
  \item Coercion
    \begin{itemize}
      \item \code{as(*, "TsparseMatrix")}
      \item \code{as(*, "dgTMatrix")}
    \end{itemize}
  \item Examples
\lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for dgTMatrix},
  label={code:dgTMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;
using namespace arma;

// [[Rcpp::export]]
sp_mat multiply(sp_mat A, sp_mat B) {
  return A * B;
}

// [[Rcpp::export]]
sp_mat trans_(sp_mat X) {
  return trans(X);
}

// [[Rcpp::export]]
int trace_(sp_mat X) {
  return trace(X);
}

/*
R> dgT <- new("dgTMatrix",
              i = c(1L,1L,0L,3L,3L),
              j = c(2L,2L,4L,0L,0L), 
              x=10*1:5, Dim=4:5)
R> dgT_t <- trans_(dgT)
R> prod <- multiply(dgT, dgT_t)
R> trace_(prod)
[1] 9900
*/
\end{lstlisting}
\end{itemize}

\subsection{dtTMatrix}
\begin{itemize}
  \item Description: triangular numeric sparse matrix in triplet form.
  \item Constructor
    \begin{itemize}
      \item \code{new("dtTMatrix", ...)}
      \item \code{sparseMatrix(*, triangular=TRUE, giveCsparse=FALSE)}
    \end{itemize}
  \item Coercion
    \begin{itemize}
      \item \code{as(*, "triangularMatrix")}
      \item \code{as(*, "dtTMatrix")}
    \end{itemize}
  \item Examples
\lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for dtTMatrix},
  label={code:dtTMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;
using namespace arma;

// [[Rcpp::export]]
sp_mat diag_ones(sp_mat X) {
  X.diag().ones();
  return X;
}

/*
R> dtT <- new("dtTMatrix", x= c(3,7), 
              i= 0:1, j=3:2, Dim= as.integer(c(4,4)))
R> diag_ones(dtT)
4 x 4 sparse Matrix of class "dgCMatrix"

[1,] 1 . . 3
[2,] . 1 7 .
[3,] . . 1 .
[4,] . . . 1
*/
\end{lstlisting}
\end{itemize}

\subsection{dsTMatrix}
\begin{itemize}
\item Description: symmetric numeric sparse matrix in triplet form.
  \item Constructor
    \begin{itemize}
      \item \code{new("dsTMatrix", ...)}
      \item \code{sparseMatrix(*, symmetric=TRUE, giveCsparse=FALSE)}
    \end{itemize}
  \item Coercion
    \begin{itemize}
      \item \code{as(*, "symmetricMatrix")}
      \item \code{as(*, "dsTMatrix")}
    \end{itemize}
  \item Examples
\lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for dsTMatrix},
  label={code:dsTMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;
using namespace arma;

// [[Rcpp::export]]
int trace_(sp_mat X) {
  return trace(X);
}

/*
R> mm <- Matrix(toeplitz(c(10, 0, 1, 0, 3)), 
                sparse = TRUE)
R> mT <- as(mm, "dgTMatrix")
R> dsT <- as(mT, "symmetricMatrix")
R> trace_(dsT)
[1] 50
*/
\end{lstlisting}
\end{itemize}

\subsection{dgRMatrix}
\begin{itemize}
  \item Description: general row-oriented numeric sparse matrix.
  \item Constructor
    \begin{itemize}
      \item \code{new("dgRMatrix", ...)}
    \end{itemize}
  \item Coercion
    \begin{itemize}
      \item \code{as(*, "RsparseMatrix")}
      \item \code{as(*, "dgRatrix")}
    \end{itemize}
  \item Examples
\lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for dgRMatrix},
  label={code:dgRMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;
using namespace arma;

// [[Rcpp::export]]
sp_mat square_(sp_mat X) {
  return square(X);
}

/*
R> library(Matrix)
R> dgR <- new("dgRMatrix", j=c(0L,2L,1L,3L),
              p=c(0L,2L,3L,3L,4L),
              x=c(3,1,2,1),
              Dim=rep(4L,2))
R> square_(dgR)
4 x 4 sparse Matrix of class "dgCMatrix"

[1,] 9 . 1 .
[2,] . 4 . .
[3,] . . . .
[4,] . . . 1
*/
\end{lstlisting}
\end{itemize}

\subsection{dtRMatrix}
\begin{itemize}
  \item Description: triangular row-oriented numeric sparse matrix.
  \item Constructor
    \begin{itemize}
      \item \code{new("dtRMatrix", ...)}
    \end{itemize}
  \item Examples
\lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for dtRMatrix},
  label={code:dtRMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;
using namespace arma;

// [[Rcpp::export]]
sp_mat repmat_(sp_mat X, int i, int j) {
  return repmat(X, i, j);
}

/*
R> dtR <- new("dtRMatrix", Dim = c(2L,2L),
              x = c(5, 1:2), p = c(0L,2:3), j= c(0:1,1L))
R> repmat_(dtR, 2, 2)
4 x 4 sparse Matrix of class "dgCMatrix"

[1,] 5 1 5 1
[2,] . 2 . 2
[3,] 5 1 5 1
[4,] . 2 . 2
*/
\end{lstlisting}
\end{itemize}

\subsection{dsRMatrix}
\begin{itemize}
  \item Description: symmetric row-oriented numeric sparse matrix.
  \item Constructor
    \begin{itemize}
      \item \code{new("dsRMatrix", ...)}
    \end{itemize}
  \item Coercion
    \begin{itemize}
      \item \code{as("dsCMatrix", "dsRMatrix")}
    \end{itemize}
  \item Examples
\lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for dsRMatrix},
  label={code:dsRMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;
using namespace arma;

// [[Rcpp::export]]
sp_mat sign_(sp_mat X) {
  return sign(X);
}

/*
R> dsR <- new("dsRMatrix", Dim = c(2L,2L),
              x = c(-3,1), j = c(1L,1L), p = 0:2)
R> sign_(dsR)
2 x 2 sparse Matrix of class "dgCMatrix"

[1,]  . -1
[2,] -1  1
*/
\end{lstlisting}
\end{itemize}

\subsection{indMatrix}
\begin{itemize}
  \item Description: index matrix.
  \item Constructor
    \begin{itemize}
      \item \code{new("indMatrix", ...)}
    \end{itemize}
  \item Coercion
    \begin{itemize}
      \item \code{as(*, "indMatrix")}
    \end{itemize}
  \item Examples
\lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for indMatrix},
  label={code:indMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;
using namespace arma;

// [[Rcpp::export]]
sp_mat multiply(sp_mat A, sp_mat B) {
  return A * B;
}

/*
R> ind <- as(2:4, "indMatrix")
R> dgT <- new("dgTMatrix",
              i = c(1L,1L,0L,3L,3L),
              j = c(2L,2L,4L,0L,0L), 
              x=10*1:5, Dim=4:5)
R> multiply(ind, dgT)
3 x 5 sparse Matrix of class "dgCMatrix"

[1,]  . . 30 . .
[2,]  . .  . . .
[3,] 90 .  . . .
*/
\end{lstlisting}
\end{itemize}

\subsection{pMatrix}
\begin{itemize}
  \item Description: permutation matrix.
  \item Constructor
    \begin{itemize}
      \item \code{new("pMatrix", ...)}
    \end{itemize}
  \item Coercion
    \begin{itemize}
      \item \code{as(*, "pMatrix")}
    \end{itemize}
  \item Examples
  \lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for pMatrix},
  label={code:pMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;
using namespace arma;

// [[Rcpp::export]]
sp_mat multiply(sp_mat A, sp_mat B) {
  return A * B;
}

/*
R> pM <- as(c(2,3,1,4), "pMatrix")
R> dgT <- new("dgTMatrix",
              i = c(1L,1L,0L,3L,3L),
              j = c(2L,2L,4L,0L,0L), 
              x=10*1:5, Dim=4:5)
R> multiply(pM, dgT)
4 x 5 sparse Matrix of class "dgCMatrix"

[1,]  . . 30 .  .
[2,]  . .  . .  .
[3,]  . .  . . 30
[4,] 90 .  . .  .
*/
\end{lstlisting}
\end{itemize}

\subsection{ddiMatrix}
\begin{itemize}
  \item Description: numeric diagonal Matrix.
  \item Constructor
    \begin{itemize}
      \item \code{new("ddiMatrix", ...)}
      \item \code{Diagonal(*)}
    \end{itemize}
  \item Examples
  \lstset{
  language=C++,
  basicstyle=\ttfamily\small,
  caption={Support for ddiMatrix},
  label={code:ddiMatrix in RcppArmadillo}
}
\begin{lstlisting}[frame=tb]
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;
using namespace arma;

// [[Rcpp::export]]
sp_mat multiply(sp_mat A, sp_mat B) {
  return A * B;
}

/*
R> ddi <- Diagonal(4)
R> dgR <- new("dgRMatrix", j=c(0L,2L,1L,3L),
              p=c(0L,2L,3L,3L,4L),
              x=c(3,1,2,1),
              Dim=rep(4L,2))
R> multiply(ddi, dgR)
4 x 4 sparse Matrix of class "dgCMatrix"

[1,] 3 . 1 .
[2,] . 2 . .
[3,] . . . .
[4,] . . . 1
*/
\end{lstlisting}
\end{itemize}

\end{document}